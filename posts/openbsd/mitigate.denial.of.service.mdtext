Mitigating against Denial of Service
time: 2011-03-10 15:20

Eventually had to get to the point of explicitly looking
at potential denial of service attacks on the firewall.

For now we've implemented the following stratagem.

- Use a table <abusers> to isolate bad guys
- Block the bad guys in the above table
- Using pass in rules, meter abusive behaviour, and drop them into the above table
- Clear out anyone who's been in the table for too long (one hour)

Your mileage may vary, but since it took almost an hour to figure out how
these things work, I'm putting it up here as a pointer to read the manuals
with some clearer understanding.


Fragments: /etc/pf.conf

<pre class="config-file">
table &lt;abusers&gt; {}

block drop in log quick on $external_if from <abusers> to any

pass out quick on $dmz_if tagged INTERNET_DMZ

pass in on $external_if from any to <webservers> \
    port https flags S/SA synproxy state \
	(max-src-nodes 50, max-src-conn 200, max-src-conn-rate 100/10, \
	overload &lt;abusers&gt; flush global) \
	tag INTERNET_DMZ
</pre>

Obviously, you'll have to decide the appropriate **maximum number**:

- remote sites 'max-src-nodes'
- connections from a single source 'max-src-conn'
- connection rate from a single source (X/Y) X connections in Y seconds

When a bad person (presumed as someone exceeding above settings) is 
still pushing traffic connections, we drop that IP Address into the
&lt;abusers&gt; table.

The above example, is for my webserver, you'll want to review what is acceptable for
the services you provide, such as mail servers, vpn servers etc.	

The final part of the puzzle pieces, is to run something that will clear out
older 'abusers.' We are doing this, incase the end-user at the IP Address
really wants to connect to our server.

Fragments: $ sudo crontab -l 

<pre class="config-file">
*/5       *      *      *      *      pfctl -t abusers -T expire 3600
</pre>

In my example, I'm using 3600 seconds, which is one hour ? You may want
to choose something more or less destructive.